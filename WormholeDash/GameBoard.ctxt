#BlueJ class context
comment0.target=GameBoard
comment0.text=\r\n\ This\ is\ the\ physical\ board\ for\ my\ Wormhole\ Dash\ game.\ The\ gameboard\ acts\ as\ a\ level\ manager\r\n\ that\ controls\ much\ of\ the\ game\ (e.g.\ game\ logic,\ game\ state,\ etc.)\r\n\ \r\n\ @author\ bickfori@email.uscb.edu\r\n\ @version\ Final\ Version\r\n
comment1.params=
comment1.target=GameBoard()
comment1.text=\r\n\ Initialize\ the\ GameBoard\ object\ and\ its\ variable\ fields\r\n
comment10.params=playerIndex\ selectedPlayerPiece
comment10.target=void\ handleSelectedPieceForPlayerIndex(int,\ PlayerPiece)
comment10.text=\r\n\ Updates\ the\ given\ player\ piece's\ location\ index\ along\ the\ movement\ path\ for\ the\ given\ playerIndex\r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ the\ selected\ piece\r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment11.params=playerIndex\ selectedPlayerPiece
comment11.target=void\ moveSelectedPieceOntoTargetSpaceForPlayerIndex(int,\ PlayerPiece)
comment11.text=\r\n\ "Helper"\ method\ (called\ by\ handleSelectedPieceForPlayerIndex)\ for\ moving\ a\r\n\ piece\ into\ a\ target\ space\ that\ is\ NOT\ the\ goal\r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ a\ piece\ into\ the\ piece's\ target\ space\ \r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment12.params=playerIndex\ selectedPlayerPiece
comment12.target=void\ resetCapturedPieceOnBoardAndReplaceWithSelectedPieceForPlayerIndex(int,\ PlayerPiece)
comment12.text=\r\n\ "Helper"\ method\ (here\ called\ by\ `moveSelectedPieceOntoTargetSpaceForPlayerIndex`)\ \r\n\ for\ handling\ the\ capture\ of\ an\ opposing\ player's\ piece\ \r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ a\ piece\ into\ that\ piece's\ target\ space\ \r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment13.params=playerIndex\ selectedPlayerPiece
comment13.target=void\ moveSelectedPieceIntoGoalZoneForPlayerIndex(int,\ PlayerPiece)
comment13.text=\r\n\ "Helper"\ method\ (here\ called\ by\ handleSelectedPieceForPlayerIndex)\ to\ move\ \r\n\ the\ selected\ playerPiece's\ SPRITE\ into\ the\ goal\ zone.\r\n\ Note\ that\ this\ only\ moves\ the\ player\ piece's\ SPRITE;\ the\ player\ piece's\ \r\n\ board\ location\ index\ is\ updated\ elsewhere\r\n\ \r\n\ Actual\ X-\ and\ Y-coordinates\ of\ each\ player's\ piece\ in\ the\ goal\ zone\ are\ each\ \ \r\n\ computed\ as\ a\ linear\ function\ of\ how\ many\ of\ that\ player's\ pieces\ are\ already\ \r\n\ in\ the\ goal\ zone\ (i.e.,\ goalCountForPlayer[playerIndex]\ )\r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ a\ piece\ into\ the\ goal\ zone\r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment14.params=playerIndex
comment14.target=void\ makeAllPiecesMoveableAgainForPlayerIndex(int)
comment14.text=\r\n\ "Turns\ on"\ (makes\ moveable)\ all\ of\ pieces\ for\ the\ given\ player\ (specified\ by\ `playerIndex`)\ \r\n\ at\ the\ conclusion\ of\ that\ player's\ turn\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ that\ is\ completing\ their\ turn\r\n
comment15.params=playerIndex
comment15.target=void\ updateGameStateAfterTurnForPlayerIndex(int)
comment15.text=\r\n\ Updates\ the\ game\ state\ (and\ checks\ for\ a\ possible\ win\ condition)\ after\ the\ player\r\n\ (specified\ by\ `playerIndex`)\ has\ just\ completed\ their\ turn\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ that\ has\ just\ completed\ their\ turn\r\n
comment16.params=playerIndex
comment16.target=void\ updateGoalCountForPlayerIndex(int)
comment16.text=\r\n\ For\ the\ given\ playerIndex,\ checks\ to\ see\ how\ many\ of\ that\ player's\ pieces\ have\ been\ \r\n\ moved\ into\ that\ goal\ zone\ at\ the\ end\ of\ that\ player's\ movement\ path\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ whose\ pieces\ are\ being\ checked\ to\ see\ if\ they're\ in\ the\ goal\ zone\r\n
comment17.params=attackingPiece\ defendingPiece
comment17.target=void\ determineBattleWinner(PlayerPiece,\ PlayerPiece)
comment17.text=\r\n\ Determines\ winner\ of\ a\ battle\ and\ sets\ appropriate\ win/loss\ counters\ for\ each\ piece.\r\n\ Additionally\ resets\ the\ piece\ to\ the\ starting\ zone\ when\ captured.\ Main\ battle\ logic.\r\n\ \r\n\ @param\ attackingPiece\ \ \ \ identifies\ which\ piece\ from\ which\ player\ index\ is\ the\ attacking\ piece\ in\ the\ battle\r\n\ @param\ defendingPiece\ \ \ \ identifies\ which\ piece\ from\ which\ player\ index\ is\ the\ defending\ piece\ in\ the\ battle\r\n
comment18.params=
comment18.target=void\ checkTier3PieceHasLost()
comment18.text=\r\n\ Checks\ to\ see\ if\ a\ tier\ 3\ piece\ has\ been\ lost,\ if\ so\ manually\ sets\ condition\ to\ switch\ state\ for\ the\ win\ of\ the\ opposing\ player\r\n
comment19.params=
comment19.target=void\ nameSpaces()
comment19.text=\r\n\ Names\ the\ planets\ and\ stars\ after\ initialization\ of\ each\ space\r\n
comment2.params=
comment2.target=void\ prepare()
comment2.text=\r\n\ Prepare\ the\ world\ for\ the\ start\ of\ the\ program.\r\n\ That\ is\:\ create\ the\ initial\ objects\ and\ add\ them\ to\ the\ world,\ along\ with\ additional\ HUD\ buttons\r\n
comment20.params=landedSpace
comment20.target=void\ displaySpaceName(Space)
comment20.text=\r\n\ Displays\ the\ name\ of\ the\ planets\ and\ stars\ on\ the\ gameboard\ for\ the\ user\ when\ called\r\n\ \r\n\ @param\ landedSpace\ \ \ space\ on\ which\ a\ player\ piece\ has\ landed\ after\ moving\r\n
comment21.params=piece\ spaceIndex
comment21.target=void\ handleLandingOnSpace(PlayerPiece,\ int)
comment21.text=\r\n\ When\ a\ player\ piece\ lands\ on\ a\ space,\ it\ displays\ the\ name\ for\ the\ user\ on\ the\ gameboard\r\n\ \r\n\ @param\ piece\ \ \ \ \ \ \ \ \ determines\ which\ piece\ is\ moving\ to\ desired\ space\r\n\ @param\ spaceIndex\ \ \ \ determines\ which\ space\ the\ piece\ is\ moving\ to\r\n
comment22.params=
comment22.target=void\ nameShips()
comment22.text=\r\n\ Names\ each\ ship\ after\ each\ ship\ has\ been\ instantiated\r\n
comment23.params=
comment23.target=void\ resetWorld()
comment23.text=\r\n\ Resets\ the\ world\ for\ a\ new\ game\r\n
comment24.params=
comment24.target=java.lang.String\ getGameModeDescription()
comment24.text=\r\n\ Checks\ for\ which\ gamemode\ the\ game\ is\ currently\ in\ by\ checking\ values\ for\ human\ or\ CPU\ controlled\ players\r\n
comment25.params=
comment25.target=void\ displayGameMode()
comment25.text=\r\n\ Displays\ the\ current\ gamemode\ determined\ by\ a\ different\ method\r\n
comment26.params=
comment26.target=void\ cycleGameMode()
comment26.text=\r\n\ Cycles\ game\ mode\ between\ various\ human\ and\ cpu\ controlled\ players\r\n
comment27.params=
comment27.target=void\ startGame()
comment27.text=\r\n\ Checks\ to\ see\ if\ the\ player\ has\ clicked\ on\ the\ title\ screen\ in\ order\ to\ start\ the\ game\r\n
comment3.params=
comment3.target=void\ act()
comment3.text=\r\n\ Depending\ on\ the\ game's\ state,\ determines\ what\ the\ GameBoard\ does\ during\r\n\ each\ frame\ or\ cycle\ of\ the\ `act`\ method\r\n
comment4.params=
comment4.target=void\ playMusic()
comment4.text=\r\n\ Starts\ the\ background\ music\ and\ sets\ its\ volume\ to\ an\ appropriate\ level\r\n
comment5.params=
comment5.target=void\ stopMusic()
comment5.text=\r\n\ Stops\ the\ background\ music\r\n
comment6.params=playerIndex
comment6.target=void\ determineDieRollValueForPlayerIndex(int)
comment6.text=\r\n\ Determines\ the\ die\ roll\ for\ the\ current\ player.\ If\ the\ player\ is\ human,\r\n\ then\ the\ human\ player\ clicks\ on\ the\ die\ object\ to\ roll\ the\ die;\ otherwise,\r\n\ the\ die\ is\ automatically\ rolled\ by\ the\ CPU.\r\n\ \r\n\ @param\ playerIndex\ \ the\ index\ of\ the\ player\ rolling\ the\ die\r\n
comment7.params=playerIndex
comment7.target=int\ determineDieRollBattle(int)
comment7.text=\r\n\ Determines\ the\ die\ roll\ for\ the\ current\ player.\ If\ the\ player\ is\ human,\r\n\ then\ the\ human\ player\ clicks\ on\ the\ die\ object\ to\ roll\ the\ die;\ otherwise,\r\n\ the\ die\ is\ automatically\ rolled\ by\ the\ CPU.\ This\ is\ similiar\ but\ has\ key\ differences\ from\ the\ previous\r\n\ determine\ die\ roll\ method.\ To\ keep\ the\ battle\ die\ logic\ seperate\ and\ clear,\ it\ has\ its\ own\r\n\ method\ here\ for\ battles.\ Additionally,\ this\ method\ uses\ a\ "6-sided\ die".\r\n\ \r\n\ @param\ playerIndex\ \ the\ index\ of\ the\ player\ rolling\ the\ die\r\n
comment8.params=playerIndex
comment8.target=void\ determineWhichPiecesAreMoveableForPlayerIndex(int)
comment8.text=\r\n\ Routine\ for\ determining\ which\ reds\ are\ moveable\r\n\ \r\n\ @param\ playerIndex\ \ \ index\ of\ the\ player\ whose\ turn\ is\ currently\ active\r\n
comment9.params=playerIndex
comment9.target=void\ determineMoveForPlayerIndex(int)
comment9.text=\r\n\ Determines\ which\ of\ the\ player's\ moveable\ pieces\ will\ actually\ be\ moved\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ currently\ moving\ \r\n
numComments=28
