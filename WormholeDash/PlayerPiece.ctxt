#BlueJ class context
comment0.target=PlayerPiece
comment0.text=\r\n\ Represents\ a\ player's\ game\ piece\ --\ player\ 1's\ pieces\ (for\ player\ index\ 0)\ are\ red\ spaceships,\r\n\ player\ 2's\ pieces\ (for\ player\ index\ 1)\ are\ blue\ spaceships.\r\n\ \r\n\ @author\ \ bickfori@email.uscb.edu\r\n\ @version\ Final\ Version\r\n
comment1.params=playerIndex\ originalXcoord\ originalYcoord\ pieceTier
comment1.target=PlayerPiece(int,\ int,\ int,\ int)
comment1.text=\r\n\ Initializes\ a\ newly-instantiated\ PlayerPiece\ object\r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ the\ index\ of\ the\ player\ that\ "owns"\ this\ PlayerPiece\ (0\ \=\ red,\ 1\ \=\ blue)\r\n\ @param\ originalXcoord\ \ \ \ the\ original\ X-coordinate\ of\ where\ this\ playerPiece\ was\ located\ for\ this\ player's\ "starting\ zone"\r\n\ @param\ originalYcoord\ \ \ \ the\ original\ Y-coordinate\ of\ where\ this\ playerPiece\ was\ located\ for\ this\ player's\ "starting\ zone"\r\n\ @param\ pieceTier\ \ \ \ \ \ \ \ \ the\ tier\ level\ of\ a\ given\ playerPiece\r\n
comment10.params=
comment10.target=int\ getTargetGameBoardLocationIndex()
comment10.text=\r\n\ Getter\ method\ for\ retrieving\ the\ possible\ game\ board\ location\ index\ based\ on\ the\ current\ die\ roll\r\n\ \r\n\ @return\ targetGameBoardLocationIndex\ returns\ the\ location\ the\ index\ value\ for\ the\ PlayerPiece\ based\ on\ the\ current\ die\ roll\ if\ it\ were\ the\ piece\ to\ be\ moved\r\n
comment11.params=targetGameBoardLocationIndex
comment11.target=void\ setTargetGameBoardLocationIndex(int)
comment11.text=\r\n\ Setter\ method\ for\ updating\ the\ possible\ TARGET\ game\ board\ location\ index\ based\ on\ the\ current\ die\ roll\r\n\ \r\n\ @param\ targetGameBoardLocationIndex\ \ \ \ \ The\ possible\ TARGET\ game\ board\ location\ index\ for\ this\ piece,\ given\ the\ current\ die\ roll\r\n
comment12.params=
comment12.target=int\ getPieceTier()
comment12.text=\r\n\ Getter\ method\ for\ getting\ the\ tier\ of\ a\ piece.\r\n\ \r\n\ @returns\ pieceTier\ \ \ the\ tier\ level\ for\ a\ given\ piece\r\n
comment13.params=
comment13.target=int\ getPlayerIndex()
comment13.text=\r\n\ Getter\ method\ for\ getting\ the\ playerIndex\ of\ a\ particular\ piece\r\n\ \r\n\ @returns\ playerIndex\ \ \ \ \ the\ index\ number\ of\ which\ player\ the\ piece\ belongs\ to\r\n
comment14.params=
comment14.target=int\ getWins()
comment14.text=\r\n\ Getter\ method\ for\ a\ piece's\ wins\ in\ battle\ (this\ is\ being\ added\ but\ may\ not\ be\ used,\ this\ is\ added\ for\ an\ optional\ feature\ of\ a\ MVP\ piece\ at\ the\ end\ of\ the\ game)\r\n\ \r\n\ @returns\ wins\ \ \ \ the\ number\ of\ wins\ in\ battles\ for\ a\ particular\ piece\r\n
comment15.params=
comment15.target=int\ getLosses()
comment15.text=\r\n\ Getter\ method\ for\ a\ piece's\ losses\ in\ battle\r\n\ \r\n\ @returns\ losses\ \ the\ number\ of\ losses\ in\ battles\ for\ a\ particular\ piece\r\n
comment16.params=
comment16.target=void\ incrementWins()
comment16.text=\r\n\ This\ allows\ a\ piece\ to\ increment\ its\ win\ value\ for\ battles\r\n
comment17.params=
comment17.target=void\ incrementLosses()
comment17.text=\r\n\ This\ allows\ a\ piece\ to\ increment\ its\ loss\ value\ for\ battles\r\n
comment18.params=name
comment18.target=void\ setShipTierName(java.lang.String)
comment18.text=\r\n\ Setter\ for\ the\ name\ of\ each\ tier\ of\ spaceship\ to\ a\ historical\ reference.\r\n\ Although\ the\ names\ are\ set\ individually\ for\ each\ ship,\ they\ name\ corresponds\ to\ the\ tier\ level\ of\ the\ ship\r\n\ \r\n\ @param\ name\ \ \ The\ name\ of\ the\ tier\ of\ ship\r\n
comment19.params=
comment19.target=java.lang.String\ getShipTierName()
comment19.text=\r\n\ Getter\ for\ the\ name\ of\ each\ tier\ of\ spaceship\r\n\ \r\n\ @return\ shipTierName\ \ \ \ \ The\ name\ for\ the\ space\ ship\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ The\ `act`\ method\ for\ the\ PlayerPiece\ is\ fairly\ simple\r\n\ since\ most\ of\ the\ game\ logic\ is\ handled\ by\ the\ GameBoard\ class;\r\n\ but\ we\ will\ use\ the\ `act`\ method\ to\ set\ the\ opacity\ (transparency)\r\n\ of\ the\ object\ depending\ on\ whether\ or\ not\ the\ piece\ is\ moveable\r\n
comment3.params=
comment3.target=void\ setImageForPiece()
comment3.text=\r\n\ This\ sets\ the\ appropriate\ image\ based\ off\ the\ player's\ team\ and\ the\ tier\ of\ the\ playerPiece.\r\n
comment4.params=
comment4.target=boolean\ isMoveable()
comment4.text=\r\n\ Getter\ method\ for\ retrieving\ this\ player\ piece's\ `moveable`\ state\ value\ (true\ or\ false)\r\n
comment5.params=moveable
comment5.target=void\ setMoveable(boolean)
comment5.text=\r\n\ Updates\ the\ moveable\ state\ of\ this\ PlayerPiece\ object\r\n\ \r\n\ @param\ moveable\ \ whether\ this\ object\ should\ be\ moveable\ or\ not\r\n
comment6.params=
comment6.target=int\ getOriginalXcoord()
comment6.text=\r\n\ Getter\ method\ for\ retrieving\ the\ original\ X-coordinate\ of\ this\ PlayerPiece\r\n\ \r\n\ @return\ originalXcoord\ \ \ returns\ the\ original\ x-coordinate\ of\ a\ PlayerPiece\ prior\ to\ movement\r\n
comment7.params=
comment7.target=int\ getOriginalYcoord()
comment7.text=\r\n\ Getter\ method\ for\ retrieving\ the\ original\ Y-coordinate\ of\ this\ PlayerPiece\r\n\ \r\n\ @return\ originalYcoord\ \ \ returns\ the\ original\ y-coordinate\ of\ a\ PlayerPiece\ prior\ to\ movement\r\n
comment8.params=
comment8.target=int\ getGameBoardLocationIndex()
comment8.text=\r\n\ Getter\ method\ for\ retrieving\ the\ current\ gameBoardLocationIndex\ for\ this\ PlayerPiece\r\n\ \r\n\ @return\ gameBoardLocationIndex\ \ \ returns\ the\ index\ value\ of\ where\ the\ current\ PlayerPiece\ is\ on\ the\ board\r\n
comment9.params=gameBoardLocationIndex
comment9.target=void\ setGameBoardLocationIndex(int)
comment9.text=\r\n\ Setter\ method\ for\ UPDATING\ the\ gameBoardLocationIndex\ for\ this\ PlayerPiece\r\n\ \r\n\ @param\ gameBoardLocationIndex\ \ \ \ the\ current\ gameBoardLocationIndex\ \r\n
numComments=20
